[package]
name = "ass-editor"
version = "0.1.0"
edition = "2021"
rust-version = "1.75"
license = "MIT"
repository = "https://github.com/wiedymi/ass-rs"
description = "High-performance, ergonomic editor layer for ASS subtitles"
homepage = "https://github.com/wiedymi/ass-rs"
documentation = "https://docs.rs/ass-editor"
readme = "README.md"
categories = ["multimedia::video", "text-editors", "parser-implementations"]
keywords = ["ass", "subtitle", "editor", "ssa", "substation"]

[lib]
path = "lib.rs"

[dependencies]
ass-core = { path = "../ass-core", default-features = false }
thiserror = { workspace = true, optional = true } # Only enabled with `std`

# Rope data structure for text editing (feature-gated)
ropey = { version = "1.6.1", default-features = false, optional = true }

# Arena allocator for pooling histories and deltas (feature-gated)
bumpalo = { version = "3.14", default-features = false, optional = true }

# FST-based search indexing (feature-gated, requires std)
fst = { version = "0.4.7", optional = true }

# For multi-threading support (feature-gated, requires std)
parking_lot = { version = "0.12", optional = true }

# For async support (feature-gated, requires std)
futures = { version = "0.3", optional = true }
tokio = { version = "1.35", features = ["sync"], optional = true }

# For serialization support (feature-gated, requires std)
serde = { version = "1.0", features = ["derive"], optional = true }

# For nostd support (alloc-only)
hashbrown = { version = "0.14", optional = true }

# For format conversion regex patterns (requires std)
regex = { version = "1.10", optional = true }

# For compile-time assertions
static_assertions = { version = "1.1", optional = true }

# WASM compatibility override  
[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.2", features = ["js"] }

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
tempfile = "3.8"
pretty_assertions = "1.4"
proptest = "1.4"

[[bench]]
name = "incremental_parsing"
harness = false
required-features = ["stream"]

[[bench]]
name = "editor_commands"
harness = false
required-features = ["full"]

[[bench]]
name = "search_performance"
harness = false
required-features = ["full"]

[[bench]]
name = "memory_performance"
harness = false
required-features = ["full"]

[features]
# Default: A fully-featured editor experience for desktop applications.
default = ["full"]

# --- Main Editor Flavors ---

# Provides the absolute minimum for a functional, performant text editor.
# This is suitable for lightweight integrations or when only core editing is needed.
# It enables alloc-only dependencies, making it compatible with `nostd`.
minimal = [
    "ass-core/minimal", # Core minimal features from ass-core
    "rope",         # Rope data structure for efficient text editing
    "arena",        # Arena allocator for pooling histories and deltas  
    "stream",       # Essential for incremental parsing performance
    "dep:hashbrown",    # HashMap support for no_std environments
]

# Provides all features for a rich, full-featured ASS subtitle editor.
# This builds upon 'minimal' by adding advanced capabilities like analysis,
# extensions, format conversion, advanced search, and concurrency.
# It explicitly enables `std` and `thiserror` (which requires `std`).
full = [
    "ass-core/full", # All ass-core features
    "minimal",      # Start with the core minimal set (which is alloc-only)
    "std",          # Standard library support
    "analysis",     # Script analysis and linting
    "plugins",      # Extension system (e.g., built-in syntax highlighting, auto-complete)
    "formats",      # Import/export format support (SRT, WebVTT)
    "search-index", # FST-based advanced search for large documents
    "concurrency",  # Multi-threading and async support for UI responsiveness
    "serde",        # Serialization for editor state (e.g., saving/loading)
    "dep:thiserror",# `thiserror` requires `std`
]

# --- Granular Features (typically enabled by 'minimal' or 'full') ---

# Standard library support. Enabled by 'full'.
# Propagates `std` to `ass-core`, and enables std for ropey and bumpalo.
std = ["ass-core/std", "ropey/default", "bumpalo/std"]

# Core parsing and analysis features from ass-core.
analysis = ["ass-core/analysis"]
plugins = ["ass-core/plugins"]
stream = ["ass-core/stream"] # Essential for incremental parsing performance

# Editor-specific dependencies.
rope = ["dep:ropey"] # Rope data structure for efficient text editing
arena = ["dep:bumpalo"] # Arena allocator for pooling histories and deltas
formats = ["dep:regex", "std"] # `regex` and format conversion require `std`
search-index = ["dep:fst", "std"] # `fst` requires `std`
serde = ["dep:serde", "ass-core/serde", "std"] # `serde` requires `std`

# Concurrency and asynchronous operation support.
concurrency = ["multi-thread", "async", "std", "dep:static_assertions"] # Concurrency features require `std`
multi-thread = ["dep:parking_lot", "std"]
async = ["dep:futures", "dep:tokio", "std"]

# --- Optional Performance Optimizations ---

# SIMD acceleration features from ass-core. Enable for maximum parsing performance.
simd = ["ass-core/simd"]
simd-full = ["ass-core/simd-full"]

# --- Specialized Build Targets ---

# No-standard library support for embedded/WASM environments.
# This feature is mutually exclusive with 'std'.
# To use this, you would typically build with `--no-default-features --features minimal,nostd`.
nostd = [
    "dep:hashbrown",
    "ass-core/nostd",
    # ropey and bumpalo are configured with default-features=false to work in no_std
    # environments. `nostd` just needs to ensure `std` isn't enabled.
]

# --- Development Features ---

# Features primarily used during development, such as benchmarks.
dev-benches = []

# [[bench]]
# name = "editor_benchmarks"
# harness = false
# required-features = ["benches"]

